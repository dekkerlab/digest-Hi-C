#!/usr/bin/env python
import matplotlib.pyplot as plt
import numpy as np
import argparse
import matrix_functions as mf
import sys
import h5py

parser = argparse.ArgumentParser(description='Create half-life matrix from timecourse')
parser.add_argument('-i', help= 'timecourse hdf5 files in order Mock -> Overnight digestion',
		nargs=7)
args = parser.parse_args()

def check_shape(x):
	'''
	Check if dimensions of numpy arrays are equal

	Args: 
		x : list of numpy ndarrays
	Returns:
		bool: True if dimensions are equal,
		false otherwise		
	'''
	dim_1 = x[0].shape
	flag = True
	for m in x[1:]:
		if m.shape != dim_1:
			flag = False 
	return flag






def main():

	# # Extract chromosome 14
	# f = h5py.File(args.i[0], 'r')
	# print f['bin_positions'][499,:]
	# print f['chr_bin_range'][:]
	# x = h5py.File('test.hdf5', 'w')
	# h5py.h5o.copy(f.id, '/', x.id, '/')
	# print x.keys()
	# quit()
	# z=h5py.File('test.hdf5', 'r')
	# print z.keys()

	z = h5py.File('test.hdf5', 'w')
	bryan_groups = ['balance_factors', 'bin_positions', 'chr_bin_range', 
	'chrs', 'interactions']

	for g in bryan_groups:
		z[g] = h5py.ExternalLink(args.i[0],g)

	print z[g].name
	w = h5py.File(args.i[0], 'r')

	print type(w.attrs.__getitem__('genome'))
	# matrices = [mf.hdf5_2_numpy_matrix(x) for x in args.i]
	# check_shape(matrices)




if __name__ == '__main__':
	main()









# fig, ax = plt.subplots(figsize=(4,4))
# x = [1,2,3]
# y = [2, 4, 9]
# ax.scatter(x,y)
# plt.savefig('test.png')
# plt.close()